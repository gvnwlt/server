/** * HttpHeader.java  * This program returns the header output from a web server. * * Usage: java HttpHeader <web server> [document name]  * * @author Gagne, Galvin, Silberschatz * Operating System Concepts with Java - Eighth Edition * Copyright John Wiley & Sons - 2010. */import java.io.*;import java.net.*;public class HttpHeader {	public static void main(String args[]) throws java.io.IOException {		if (args.length < 1) {			System.err					.println("Usage: java HttpHeader <web server> [document name]");			System.exit(0);		}		final int PORT = 80;		Socket sock = null;		BufferedReader in = null;		PrintWriter out = null;		String requestedDocument = "";		if (args.length == 2)			requestedDocument = args[1];		try {			/* Comment Here */                        // Creates a new socket with an ip address an port to talk to. 			sock = new Socket(args[0], PORT);			/* Comment Here */                        // Creates a new buffer to read in an input stream. Reads in the stream as                         // strings rather than a character at a time. 			in = new BufferedReader(					new InputStreamReader(sock.getInputStream()));			out = new PrintWriter(					new OutputStreamWriter(sock.getOutputStream()));			/* Comment Here */                        // Stores a string message that contains document, host, and header information.                         // Once the message is printed to screen it is flused from the buffer. 			String message = "GET /" + requestedDocument					+ " HTTP/1.1 \r\nHost: " + args[0] + "\r\n\r\n";			out.print(message);			out.flush();			/* Comment Here */                        // Reads in lines and prints them out until none are left.                         // If the line is blank it breaks out of the loop. 			String line;			while ((line = in.readLine()) != null) {				if (line.length() == 0)					break;				System.out.println(line);			}		}		/* Comment Here */                // If an exception of any kind happens, a message prints out to                 // standard error. Finally...the finally block executes no matter how the                 // try block finishes. If any of the streams or socket is still open they are then closed. 		catch (Exception e) {			System.err.println(e);		} finally { // close all streams			if (in != null)				in.close();			if (out != null)				out.close();			if (sock != null)				sock.close();		}	}}